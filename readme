# HealthLens

## A lightweight health & fitness tracker built with Flask, styled with Tailwind CSS, storing data in SQLite, and enhanced with Google Gemini AI features (e.g., smart insights/explanations).

# Tech Stack
<p> <img alt="Python" src="https://img.shields.io/badge/Python-3.10%2B-3776AB?logo=python&logoColor=white" /> <img alt="Flask" src="https://img.shields.io/badge/Flask-2.x-000000?logo=flask&logoColor=white" /> <img alt="Tailwind CSS" src="https://img.shields.io/badge/Tailwind%20CSS-3.x-38B2AC?logo=tailwindcss&logoColor=white" /> <img alt="SQLite" src="https://img.shields.io/badge/SQLite-3-003B57?logo=sqlite&logoColor=white" /> <img alt="Google Gemini" src="https://img.shields.io/badge/Google%20Gemini-API-4285F4?logo=google&logoColor=white" /> </p>

# Requirements

    Python 3.10+
    
    pip (or uv/pipx, if you prefer)
    
    virtualenv (recommended)
    
    SQLite 3 (usually included with Python)
    
    Google Gemini API key (set GEMINI_API_KEY)
    
    Tailwind CSS
    If you’re using Tailwind via CDN, no extra tooling is needed.
    If you’re using the Tailwind CLI build, you’ll also need Node.js 18+ installed.

Quick Start
# 1) Create & activate a virtual environment
python -m venv .venv
# On Windows:
. .venv/Scripts/activate
# On macOS/Linux:
# source .venv/bin/activate

# 2) Install dependencies
pip install --upgrade pip
# If the repo has requirements.txt:
pip install -r requirements.txt
# Otherwise, minimally:
# pip install flask python-dotenv google-generativeai

# 3) (Optional) Tailwind build (ONLY if you’re not using the CDN)
# Requires Node.js 18+ and a tailwind config already in the repo.
# npm install
# npx tailwindcss -i ./static/src/input.css -o ./static/dist/output.css --watch

# 4) Set environment variables (PowerShell syntax shown; adjust for your shell)
setx FLASK_APP app.py
setx FLASK_ENV development
setx GEMINI_API_KEY "YOUR_GEMINI_API_KEY"

# Close & reopen the terminal to ensure setx vars load into the session,
# then reactivate the venv:
. .venv/Scripts/activate

# 5) Initialize the SQLite DB if your app exposes a CLI or script
# (Examples – pick the right one for your repo)
# flask db upgrade
# or:
# python scripts/init_db.py

# 6) Run the app
flask run --host=0.0.0.0 --port=5000

# App will be live at:
# http://localhost:5000



Environment Variables

Create a .env at the project root (or set system env vars):
FLASK_ENV=development
SECRET_KEY=change-me
GEMINI_API_KEY=your_google_gemini_api_key
# If you use a custom DB path:
DATABASE_URL=sqlite:///healthlens.db


License

This project is licensed under the MIT License.
Feel free to use, modify, and distribute with attribution.


